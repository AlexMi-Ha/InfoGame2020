#BlueJ class context
comment0.target=LevelGeneration
comment0.text=\r\n\ Diese\ Klasse\ ist\ verantwortlich\ daf\u00C3\u00BCr,\ einen\ zuf\u00C3\u00A4llig\ vernetzten\ Raum-graphen\ zu\ erstellen.\r\n\ Dieser\ besitzt,\ solange\ es\ nicht\ mehr\ R\u00C3\u00A4ume\ sind\ als\ Platz\ ist,\r\n\ immer\ so\ viele\ R\u00C3\u00A4ume\ wie\ dem\ Konstruktor\ \u00C3\u00BCbergeben\ werden.\r\n\ <p>Um\ ein\ Level\ zu\ Generieren,\ muss\ entweder\ der\ Konstruktor\ \r\n\ oder\ die\ {@link\ \#generateLevel()}\ Methode\ aufgerufen\ werden.</p>\r\n\ \r\n\ @author\ Alex\r\n\ @version\ 17.5.2020\r\n
comment1.params=numOfRooms
comment1.target=LevelGeneration(int)
comment1.text=\r\n\ Erzeugt\ eine\ neue\ LevelGeneration\ mit\ numOfRooms\ R\u00C3\u00A4umen\r\n\ @param\ numOfRooms\ Wie\ viele\ R\u00C3\u00A4ume\ soll\ der\ Generator\ generieren?\r\n
comment10.params=
comment10.target=void\ createRoomDoors()
comment10.text=\r\n\ Diese\ Methode\ updated\ alle\ T\u00C3\u00BCr\ variablen\ der\ R\u00C3\u00A4ume\ um\ die\ Verbindung\ zwischen\ den\ R\u00C3\u00A4umen\ herzustellen\r\n
comment11.params=pos
comment11.target=int[]\ getFurthestRoomFrom(int[])
comment11.text=\r\n\ Hier\ wird\ der\ am\ weitesten\ entfernte\ Raum,\ der\ weder\ Spawn,\ Key\ noch\ Boss\ raum\ ist,\ \r\n\ von\ der\ \u00C3\u00BCbergebenen\ pos\ aus\ berechnet\r\n\ @param\ pos\ Ortsvektor\ der\ Startposition\r\n\ @return\ Ortsvektor\ zu\ der\ berechneten\ Position\r\n
comment12.params=pos\ type
comment12.target=void\ markDoors(int[],\ Room.ROOM_TYPE)
comment12.text=\r\n\ Hier\ werden\ alle\ T\u00C3\u00BCren\ zu\ einem\ Raumes\ und\ der\ Raum\ selbst\ an\ einer\ bestimmten\ Position\ als\ bestimmter\ Typ\ markiert.\r\n\ @param\ pos\ Ortsvektor\ zu\ dem\ Raum\r\n\ @param\ type\ ROOM_TYPE\ mit\ dem\ die\ T\u00C3\u00BCren\ markiert\ werden\ sollen\ \r\n
comment13.params=
comment13.target=void\ saveMapImg()
comment13.text=\r\n\ Diese\ Methode\ speichert\ eine\ repr\u00C3\u00A4sentation\ des\ Raum-graphen\ als\ Bild\ ab\r\n\ @throws\ IOException\r\n
comment14.params=
comment14.target=Room[][]\ getRooms()
comment14.text=\r\n\ Gibt\ die\ Raummatrix\ zur\u00C3\u00BCck\r\n\ @return\ 2D\ Array\ aller\ R\u00C3\u00A4ume\r\n
comment15.params=
comment15.target=int[]\ getGridSize()
comment15.text=\r\n\ Gibt\ den\ gridSize\ Vektor\ zur\u00C3\u00BCck\r\n\ @return\ 2DVektor\ mit\ der\ Gridgr\u00C3\u00B6\u00C3\u0178e\ in\ eine\ Richtung\r\n
comment16.params=a\ b\ f
comment16.target=float\ lerp(float,\ float,\ float)
comment16.text=\r\n\ Diese\ Methode\ geht\ um\ f-prozent\ von\ a\ zu\ b\r\n\ @param\ a\ Start-wert\r\n\ @param\ b\ End-wert\r\n\ @param\ f\ wie\ nah\ soll\ an\ b\ angen\u00C3\u00A4hert\ werden.\ Von\ f\ \=\ 0\ ->\ returns\ a\ bis\ f\ \=\ 1\ ->\ returns\ b\r\n\ @return\ Gibt\ den\ berechneten\ Wert\ als\ float\ zur\u00C3\u00BCck\r\n
comment17.params=
comment17.target=int[]\ zeroVector()
comment17.text=\r\n\ Gibt\ den\ Nullvektor\ zur\u00C3\u00BCck\r\n\ @return\ Gibt\ einen\ Nullvektor\ zur\u00C3\u0192\u00C2\u00BCck\r\n
comment18.params=v
comment18.target=int[]\ rightVector(int[])
comment18.text=\r\n\ Addiert\ den\ Vektor\ (1,\ 0)\ zu\ dem\ \u00C3\u0192\u00C2\u00BCbergebenen\ Vektor\r\n\ @param\ Ortsvektor\ von\ welchem\ aus\ gerechnet\ werden\ soll\r\n\ @return\ Gibt\ neuen\ Vektor,\ der\ rechts\ von\ Vektor\ v\ ist,\ zur\u00C3\u00BCck\r\n
comment19.params=v
comment19.target=int[]\ leftVector(int[])
comment19.text=\r\n\ Addiert\ den\ Vektor\ (-1,\ 0)\ zu\ dem\ \u00C3\u0192\u00C2\u00BCbergebenen\ Vektor\r\n\ @param\ Ortsvektor\ von\ welchem\ aus\ gerechnet\ werden\ soll\r\n\ @return\ Gibt\ neuen\ Vektor,\ der\ links\ von\ Vektor\ v\ ist,\ zur\u00C3\u00BCck\r\n
comment2.params=
comment2.target=LevelGeneration()
comment2.text=\r\n\ Erzeugt\ eine\ neue\ LevelGeneration\ mit\ 20\ R\u00C3\u00A4umen\r\n
comment20.params=v
comment20.target=int[]\ upVector(int[])
comment20.text=\r\n\ Addiert\ den\ Vektor\ (0,\ -1)\ zu\ dem\ \u00C3\u0192\u00C2\u00BCbergebenen\ Vektor\r\n\ @param\ Ortsvektor\ von\ welchem\ aus\ gerechnet\ werden\ soll\r\n\ @return\ Gibt\ neuen\ Vektor,\ der\ \u00C3\u00BCber\ Vektor\ v\ ist,\ zur\u00C3\u00BCck\r\n
comment21.params=v
comment21.target=int[]\ downVector(int[])
comment21.text=\r\n\ Addiert\ den\ Vektor\ (0,\ 1)\ zu\ dem\ \u00C3\u0192\u00C2\u00BCbergebenen\ Vektor\r\n\ @param\ Ortsvektor\ von\ welchem\ aus\ gerechnet\ werden\ soll\r\n\ @return\ Gibt\ neuen\ Vektor,\ der\ unter\ Vektor\ v\ ist,\ zur\u00C3\u00BCck\r\n
comment22.params=pos
comment22.target=int[]\ toWorldCoords(int[])
comment22.text=\r\n\ Transformiert\ die\ \u00C3\u0192\u00C2\u00BCbergebene\ Position\ in\ das\ Weltkoordinatensystem\ ((0|0)\ oben\ links)\r\n\ @param\ pos\ Ortsvektor\ in\ Game\ Coords\r\n\ @return\ Gibt\ Ortsvektor\ pos\ als\ World\ Coords\ zur\u00C3\u00BCck\r\n
comment23.params=pos
comment23.target=int[]\ toGameCoords(int[])
comment23.text=\r\n\ Transformiert\ die\ \u00C3\u0192\u00C2\u00BCbergebene\ Position\ in\ das\ Game-koordinatensystem\ ((0|0)\ in\ der\ Mitte)\r\n\ @param\ pos\ Ortsvektor\ in\ World\ Coords\r\n\ @return\ Gibt\ Ortsvektor\ pos\ als\ Game\ Coords\ zur\u00C3\u00BCck\r\n
comment3.params=
comment3.target=void\ generateLevel()
comment3.text=\r\n\ Diese\ Methode\ wird\ benutzt\ um\ das\ Level\ zu\ generieren\r\n
comment4.params=
comment4.target=void\ createRooms()
comment4.text=\r\n\ Hier\ wird\ der\ zuf\u00C3\u00A4llige\ Raum-graph\ erstellt\r\n
comment5.params=
comment5.target=int[]\ newPos()
comment5.text=\r\n\ Diese\ Methode\ berechnet\ eine\ neue\ zuf\u00C3\u00A4llige\ Position\r\n\ @return\ Gibt\ einen\ Ortsvektor\ zu\ der\ Position\ zur\u00C3\u00BCck\r\n
comment6.params=
comment6.target=int[]\ bestNewPos()
comment6.text=\r\n\ Diese\ Methode\ berechnet\ eine\ optimale,\ neue\ Position,\ mit\ m\u00C3\u00B6glichst\ wenigen\ Nachbarn\r\n\ @return\ Gibt\ einen\ Ortsvektor\ zu\ der\ Position\ zur\u00C3\u00BCck\r\n
comment7.params=pos
comment7.target=int\ numberOfNeighbors(int[])
comment7.text=\r\n\ Berechnet\ die\ Anzahl\ der\ Nachbarn\ eines\ bestimmten\ Raumes\r\n\ @param\ pos\ Ortsvektor\ der\ zu\ \u00C3\u00BCberpr\u00C3\u00BCfenden\ Position\r\n\ @return\ Gibt\ die\ Anzahl\ der\ Nachbarn\ des\ Raumes\ zur\u00C3\u00BCck\r\n
comment8.params=pos
comment8.target=boolean\ posTaken(int[])
comment8.text=\r\n\ \u00C3\u0192\u00C5\u201Cberpr\u00C3\u0192\u00C2\u00BCft\ ob\ eine\ bestimmte\ Position\ bereits\ von\ einem\ Raum\ besetzt\ ist\r\n\ @param\ pos\ Ortsvektor\ der\ zu\ \u00C3\u0192\u00C2\u00BCberpr\u00C3\u0192\u00C2\u00BCfenden\ Position\r\n\ @return\ Boolean,\ ob\ die\ Position\ besetzt\ ist\r\n
comment9.params=
comment9.target=Room.ROOM_TYPE\ pickRandomRoomType()
comment9.text=\r\n\ Berechnet\ einen\ zuf\u00C3\u00A4lligen\ Wert\ des\ ROOM_TYPE\ enums\ \r\n\ (nur\ aus\ den\ ersten\ drei,\ da\ nur\ die\ ersten\ drei\ von\ dieser\ Methode\ vergeben\ werden\ d\u00C3\u00BCrfen)\r\n\ @return\ Gibt\ einen\ zuf\u00C3\u00A4lligen\ ROOM_TYPE\ zur\u00C3\u00BCck\r\n
numComments=24
